import { Cache, Locator, Descriptor, Ident, Project, FetchOptions, Package } from '@yarnpkg/core';
import { PortablePath } from '@yarnpkg/fslib';
export { applyPatchFile } from './tools/apply';
export { parsePatchFile } from './tools/parse';
export declare function parseDescriptor(descriptor: Descriptor): {
    sourceDescriptor: Descriptor;
    parentLocator: Locator | null;
    patchPaths: PortablePath[];
    sourceVersion: string | null;
};
export declare function parseLocator(locator: Locator): {
    sourceLocator: Locator;
    parentLocator: Locator | null;
    patchPaths: PortablePath[];
    sourceVersion: string | null;
};
export declare function makeDescriptor(ident: Ident, { parentLocator, sourceDescriptor, patchPaths }: ReturnType<typeof parseDescriptor>): Locator;
export declare function makeLocator(ident: Ident, { parentLocator, sourcePackage, patchPaths, patchHash }: Omit<ReturnType<typeof parseLocator>, 'sourceLocator' | 'sourceVersion'> & {
    sourcePackage: Package;
    patchHash: string;
}): Locator;
export declare function isParentRequired(patchPath: PortablePath): boolean;
export declare function loadPatchFiles(parentLocator: Locator | null, patchPaths: Array<PortablePath>, opts: FetchOptions): Promise<(string | null)[]>;
export declare function extractPackageToDisk(locator: Locator, { cache, project }: {
    cache: Cache;
    project: Project;
}): Promise<PortablePath>;
export declare function diffFolders(folderA: PortablePath, folderB: PortablePath): Promise<string>;
