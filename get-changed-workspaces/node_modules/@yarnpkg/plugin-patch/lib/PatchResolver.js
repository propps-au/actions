"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PatchResolver = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@yarnpkg/core");
const core_2 = require("@yarnpkg/core");
const patchUtils = tslib_1.__importStar(require("./patchUtils"));
// We use this to for the patches to be regenerated without bumping the whole
// cache, like when the libzip had incorrect mtime in some cases
const CACHE_VERSION = 2;
class PatchResolver {
    supportsDescriptor(descriptor, opts) {
        if (!descriptor.range.startsWith(`patch:`))
            return false;
        return true;
    }
    supportsLocator(locator, opts) {
        if (!locator.reference.startsWith(`patch:`))
            return false;
        return true;
    }
    shouldPersistResolution(locator, opts) {
        return false;
    }
    bindDescriptor(descriptor, fromLocator, opts) {
        // If the patch is statically defined (ie absolute or a builtin), then we
        // don't need to bind the descriptor to its parent
        const { patchPaths } = patchUtils.parseDescriptor(descriptor);
        if (patchPaths.every(patchPath => !patchUtils.isParentRequired(patchPath)))
            return descriptor;
        return core_2.structUtils.bindDescriptor(descriptor, {
            locator: core_2.structUtils.stringifyLocator(fromLocator),
        });
    }
    getResolutionDependencies(descriptor, opts) {
        const { sourceDescriptor } = patchUtils.parseDescriptor(descriptor);
        return [sourceDescriptor];
    }
    async getCandidates(descriptor, dependencies, opts) {
        if (!opts.fetchOptions)
            throw new Error(`Assertion failed: This resolver cannot be used unless a fetcher is configured`);
        const { parentLocator, sourceDescriptor, patchPaths } = patchUtils.parseDescriptor(descriptor);
        const patchFiles = await patchUtils.loadPatchFiles(parentLocator, patchPaths, opts.fetchOptions);
        const sourcePackage = dependencies.get(sourceDescriptor.descriptorHash);
        if (typeof sourcePackage === `undefined`)
            throw new Error(`Assertion failed: The dependency should have been resolved`);
        const patchHash = core_1.hashUtils.makeHash(`${CACHE_VERSION}`, ...patchFiles).slice(0, 6);
        return [patchUtils.makeLocator(descriptor, { parentLocator, sourcePackage, patchPaths, patchHash })];
    }
    async getSatisfying(descriptor, references, opts) {
        return null;
    }
    async resolve(locator, opts) {
        const { sourceLocator } = patchUtils.parseLocator(locator);
        const sourcePkg = await opts.resolver.resolve(sourceLocator, opts);
        return { ...sourcePkg, ...locator };
    }
}
exports.PatchResolver = PatchResolver;
