"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const fslib_1 = require("@yarnpkg/fslib");
const clipanion_1 = require("clipanion");
const patchUtils = tslib_1.__importStar(require("../patchUtils"));
// eslint-disable-next-line arca/no-default-export
class PatchCommitCommand extends cli_1.BaseCommand {
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        const { project, workspace } = await core_1.Project.find(configuration, this.context.cwd);
        const cache = await core_1.Cache.find(configuration);
        if (!workspace)
            throw new cli_1.WorkspaceRequiredError(project.cwd, this.context.cwd);
        await project.restoreInstallState();
        const folderPath = fslib_1.ppath.resolve(this.context.cwd, fslib_1.npath.toPortablePath(this.patchFolder));
        const metaPath = fslib_1.ppath.join(folderPath, `.yarn-patch.json`);
        if (!fslib_1.xfs.existsSync(metaPath))
            throw new clipanion_1.UsageError(`The argument folder didn't get created by 'yarn patch'`);
        const meta = await fslib_1.xfs.readJsonPromise(metaPath);
        const locator = core_1.structUtils.parseLocator(meta.locator, true);
        if (!project.storedPackages.has(locator.locatorHash))
            throw new clipanion_1.UsageError(`No package found in the project for the given locator`);
        const originalPath = await patchUtils.extractPackageToDisk(locator, { cache, project });
        this.context.stdout.write(await patchUtils.diffFolders(originalPath, folderPath));
    }
}
PatchCommitCommand.usage = clipanion_1.Command.Usage({
    description: `
      This will turn the folder passed in parameter into a patchfile suitable for consumption with the \`patch:\` protocol.

      Only folders generated through \`yarn patch\` are accepted as valid input for \`yarn patch-commit\`.
    `,
});
tslib_1.__decorate([
    clipanion_1.Command.String()
], PatchCommitCommand.prototype, "patchFolder", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Path(`patch-commit`)
], PatchCommitCommand.prototype, "execute", null);
exports.default = PatchCommitCommand;
