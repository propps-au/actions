"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const clipanion_1 = require("clipanion");
// eslint-disable-next-line arca/no-default-export
class CreateCommand extends cli_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.quiet = false;
        this.args = [];
    }
    async execute() {
        const flags = [];
        if (this.pkg)
            flags.push(`--package`, this.pkg);
        if (this.quiet)
            flags.push(`--quiet`);
        const ident = core_1.structUtils.parseIdent(this.command);
        const modified = core_1.structUtils.makeIdent(ident.scope, `create-${ident.name}`);
        return this.cli.run([`dlx`, ...flags, core_1.structUtils.stringifyIdent(modified), ...this.args]);
    }
}
tslib_1.__decorate([
    clipanion_1.Command.String(`-p,--package`, { description: `The package to run the provided command from` })
], CreateCommand.prototype, "pkg", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Boolean(`-q,--quiet`, { description: `Only report critical errors instead of printing the full install logs` })
], CreateCommand.prototype, "quiet", void 0);
tslib_1.__decorate([
    clipanion_1.Command.String()
], CreateCommand.prototype, "command", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Proxy()
], CreateCommand.prototype, "args", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Path(`create`)
], CreateCommand.prototype, "execute", null);
exports.default = CreateCommand;
