"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.suggestUtils = exports.dedupeUtils = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@yarnpkg/core");
const add_1 = tslib_1.__importDefault(require("./commands/add"));
const bin_1 = tslib_1.__importDefault(require("./commands/bin"));
const clean_1 = tslib_1.__importDefault(require("./commands/cache/clean"));
const get_1 = tslib_1.__importDefault(require("./commands/config/get"));
const set_1 = tslib_1.__importDefault(require("./commands/config/set"));
const config_1 = tslib_1.__importDefault(require("./commands/config"));
const dedupe_1 = tslib_1.__importDefault(require("./commands/dedupe"));
const clipanion_1 = tslib_1.__importDefault(require("./commands/entries/clipanion"));
const help_1 = tslib_1.__importDefault(require("./commands/entries/help"));
const run_1 = tslib_1.__importDefault(require("./commands/entries/run"));
const version_1 = tslib_1.__importDefault(require("./commands/entries/version"));
const exec_1 = tslib_1.__importDefault(require("./commands/exec"));
const peerRequirements_1 = tslib_1.__importDefault(require("./commands/explain/peerRequirements"));
const info_1 = tslib_1.__importDefault(require("./commands/info"));
const install_1 = tslib_1.__importDefault(require("./commands/install"));
const link_1 = tslib_1.__importDefault(require("./commands/link"));
const node_1 = tslib_1.__importDefault(require("./commands/node"));
const sources_1 = tslib_1.__importDefault(require("./commands/plugin/import/sources"));
const import_1 = tslib_1.__importDefault(require("./commands/plugin/import"));
const list_1 = tslib_1.__importDefault(require("./commands/plugin/list"));
const remove_1 = tslib_1.__importDefault(require("./commands/plugin/remove"));
const runtime_1 = tslib_1.__importDefault(require("./commands/plugin/runtime"));
const rebuild_1 = tslib_1.__importDefault(require("./commands/rebuild"));
const remove_2 = tslib_1.__importDefault(require("./commands/remove"));
const runIndex_1 = tslib_1.__importDefault(require("./commands/runIndex"));
const run_2 = tslib_1.__importDefault(require("./commands/run"));
const resolution_1 = tslib_1.__importDefault(require("./commands/set/resolution"));
const sources_2 = tslib_1.__importDefault(require("./commands/set/version/sources"));
const version_2 = tslib_1.__importDefault(require("./commands/set/version"));
const up_1 = tslib_1.__importDefault(require("./commands/up"));
const why_1 = tslib_1.__importDefault(require("./commands/why"));
const list_2 = tslib_1.__importDefault(require("./commands/workspaces/list"));
const workspace_1 = tslib_1.__importDefault(require("./commands/workspace"));
const dedupeUtils = tslib_1.__importStar(require("./suggestUtils"));
exports.dedupeUtils = dedupeUtils;
const suggestUtils = tslib_1.__importStar(require("./suggestUtils"));
exports.suggestUtils = suggestUtils;
const plugin = {
    configuration: {
        enableImmutableInstalls: {
            description: `If true, prevents the install command from modifying the lockfile`,
            type: core_1.SettingsType.BOOLEAN,
            default: false,
        },
        defaultSemverRangePrefix: {
            description: `The default save prefix: '^', '~' or ''`,
            type: core_1.SettingsType.STRING,
            values: [`^`, `~`, ``],
            default: suggestUtils.Modifier.CARET,
        },
    },
    commands: [
        clean_1.default,
        get_1.default,
        set_1.default,
        resolution_1.default,
        sources_2.default,
        version_2.default,
        list_2.default,
        clipanion_1.default,
        help_1.default,
        run_1.default,
        version_1.default,
        add_1.default,
        bin_1.default,
        config_1.default,
        dedupe_1.default,
        exec_1.default,
        peerRequirements_1.default,
        info_1.default,
        install_1.default,
        link_1.default,
        node_1.default,
        sources_1.default,
        import_1.default,
        remove_1.default,
        list_1.default,
        runtime_1.default,
        rebuild_1.default,
        remove_2.default,
        runIndex_1.default,
        run_2.default,
        up_1.default,
        why_1.default,
        workspace_1.default,
    ],
};
// eslint-disable-next-line arca/no-default-export
exports.default = plugin;
