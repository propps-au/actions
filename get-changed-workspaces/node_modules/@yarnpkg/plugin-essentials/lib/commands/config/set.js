"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const clipanion_1 = require("clipanion");
const cloneDeep_1 = tslib_1.__importDefault(require("lodash/cloneDeep"));
const get_1 = tslib_1.__importDefault(require("lodash/get"));
const set_1 = tslib_1.__importDefault(require("lodash/set"));
const util_1 = require("util");
// eslint-disable-next-line arca/no-default-export
class ConfigSetCommand extends cli_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.json = false;
        this.home = false;
    }
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        if (!configuration.projectCwd)
            throw new clipanion_1.UsageError(`This command must be run from within a project folder`);
        const name = this.name.replace(/[.[].*$/, ``);
        const path = this.name.replace(/^[^.[]*\.?/, ``);
        const setting = configuration.settings.get(name);
        if (typeof setting === `undefined`)
            throw new clipanion_1.UsageError(`Couldn't find a configuration settings named "${name}"`);
        const value = this.json
            ? JSON.parse(this.value)
            : this.value;
        const updateConfiguration = this.home
            ? patch => core_1.Configuration.updateHomeConfiguration(patch)
            : patch => core_1.Configuration.updateConfiguration(configuration.projectCwd, patch);
        await updateConfiguration(current => {
            if (path) {
                const clone = cloneDeep_1.default(current);
                set_1.default(clone, this.name, value);
                return clone;
            }
            else {
                return {
                    ...current,
                    [name]: value,
                };
            }
        });
        const updatedConfiguration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        const displayedValue = updatedConfiguration.getSpecial(name, {
            hideSecrets: true,
            getNativePaths: true,
        });
        const asObject = core_1.miscUtils.convertMapsToIndexableObjects(displayedValue);
        const requestedObject = path
            ? get_1.default(asObject, path)
            : asObject;
        const report = await core_1.StreamReport.start({
            configuration,
            includeFooter: false,
            stdout: this.context.stdout,
        }, async (report) => {
            // @ts-expect-error: The Node typings forgot one field
            util_1.inspect.styles.name = `cyan`;
            report.reportInfo(core_1.MessageName.UNNAMED, `Successfully set ${this.name} to ${util_1.inspect(requestedObject, {
                depth: Infinity,
                colors: configuration.get(`enableColors`),
                compact: false,
            })}`);
        });
        return report.exitCode();
    }
}
ConfigSetCommand.usage = clipanion_1.Command.Usage({
    description: `change a configuration settings`,
    details: `
      This command will set a configuration setting.

      When used without the \`--json\` flag, it can only set a simple configuration setting (a string, a number, or a boolean).

      When used with the \`--json\` flag, it can set both simple and complex configuration settings, including Arrays and Objects.
    `,
    examples: [[
            `Set a simple configuration setting (a string, a number, or a boolean)`,
            `yarn config set initScope myScope`,
        ], [
            `Set a simple configuration setting (a string, a number, or a boolean) using the \`--json\` flag`,
            `yarn config set initScope --json \\"myScope\\"`,
        ], [
            `Set a complex configuration setting (an Array) using the \`--json\` flag`,
            `yarn config set unsafeHttpWhitelist --json '["*.example.com", "example.com"]'`,
        ], [
            `Set a complex configuration setting (an Object) using the \`--json\` flag`,
            `yarn config set packageExtensions --json '{ "@babel/parser@*": { "dependencies": { "@babel/types": "*" } } }'`,
        ], [
            `Set a nested configuration setting`,
            `yarn config set npmScopes.company.npmRegistryServer "https://npm.example.com"`,
        ], [
            `Set a nested configuration setting using indexed access for non-simple keys`,
            `yarn config set 'npmRegistries["//npm.example.com"].npmAuthToken' "ffffffff-ffff-ffff-ffff-ffffffffffff"`,
        ]],
});
tslib_1.__decorate([
    clipanion_1.Command.String()
], ConfigSetCommand.prototype, "name", void 0);
tslib_1.__decorate([
    clipanion_1.Command.String()
], ConfigSetCommand.prototype, "value", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Boolean(`--json`, { description: `Set complex configuration settings to JSON values` })
], ConfigSetCommand.prototype, "json", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Boolean(`-H,--home`, { description: `Update the home configuration instead of the project configuration` })
], ConfigSetCommand.prototype, "home", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Path(`config`, `set`)
], ConfigSetCommand.prototype, "execute", null);
exports.default = ConfigSetCommand;
