"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const fslib_1 = require("@yarnpkg/fslib");
const clipanion_1 = require("clipanion");
// eslint-disable-next-line arca/no-default-export
class PluginRemoveCommand extends cli_1.BaseCommand {
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        const { project } = await core_1.Project.find(configuration, this.context.cwd);
        const report = await core_1.StreamReport.start({
            configuration,
            stdout: this.context.stdout,
        }, async (report) => {
            const pluginName = this.name;
            const pluginIdent = core_1.structUtils.parseIdent(pluginName);
            if (!configuration.plugins.has(pluginName))
                throw new clipanion_1.UsageError(`${core_1.structUtils.prettyIdent(configuration, pluginIdent)} isn't referenced by the current configuration`);
            const relativePath = `.yarn/plugins/${pluginName}.cjs`;
            const absolutePath = fslib_1.ppath.resolve(project.cwd, relativePath);
            if (fslib_1.xfs.existsSync(absolutePath)) {
                report.reportInfo(core_1.MessageName.UNNAMED, `Removing ${core_1.formatUtils.pretty(configuration, relativePath, core_1.formatUtils.Type.PATH)}...`);
                await fslib_1.xfs.removePromise(absolutePath);
            }
            report.reportInfo(core_1.MessageName.UNNAMED, `Updating the configuration...`);
            await core_1.Configuration.updateConfiguration(project.cwd, (current) => {
                if (!Array.isArray(current.plugins))
                    return current;
                const plugins = current.plugins.filter((plugin) => {
                    return plugin.path !== relativePath;
                });
                if (current.plugins.length === plugins.length)
                    return current;
                return {
                    ...current,
                    plugins,
                };
            });
        });
        return report.exitCode();
    }
}
PluginRemoveCommand.usage = clipanion_1.Command.Usage({
    category: `Plugin-related commands`,
    description: `remove a plugin`,
    details: `
      This command deletes the specified plugin from the .yarn/plugins folder and removes it from the configuration.

      **Note:** The plugins have to be referenced by their name property, which can be obtained using the \`yarn plugin runtime\` command. Shorthands are not allowed.
   `,
    examples: [[
            `Remove a plugin imported from the Yarn repository`,
            `$0 plugin remove @yarnpkg/plugin-typescript`,
        ], [
            `Remove a plugin imported from a local file`,
            `$0 plugin remove my-local-plugin`,
        ]],
});
tslib_1.__decorate([
    clipanion_1.Command.String()
], PluginRemoveCommand.prototype, "name", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Path(`plugin`, `remove`)
], PluginRemoveCommand.prototype, "execute", null);
exports.default = PluginRemoveCommand;
