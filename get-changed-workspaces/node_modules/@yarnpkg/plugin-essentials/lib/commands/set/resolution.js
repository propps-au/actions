"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const core_2 = require("@yarnpkg/core");
const clipanion_1 = require("clipanion");
// eslint-disable-next-line arca/no-default-export
class SetResolutionCommand extends cli_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.save = false;
    }
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        const { project, workspace } = await core_1.Project.find(configuration, this.context.cwd);
        const cache = await core_1.Cache.find(configuration);
        if (!workspace)
            throw new cli_1.WorkspaceRequiredError(project.cwd, this.context.cwd);
        const fromDescriptor = core_2.structUtils.parseDescriptor(this.descriptor, true);
        const toDescriptor = core_2.structUtils.makeDescriptor(fromDescriptor, this.resolution);
        project.storedDescriptors.set(fromDescriptor.descriptorHash, fromDescriptor);
        project.storedDescriptors.set(toDescriptor.descriptorHash, toDescriptor);
        project.resolutionAliases.set(fromDescriptor.descriptorHash, toDescriptor.descriptorHash);
        const report = await core_1.StreamReport.start({
            configuration,
            stdout: this.context.stdout,
        }, async (report) => {
            await project.install({ cache, report });
        });
        return report.exitCode();
    }
}
SetResolutionCommand.usage = clipanion_1.Command.Usage({
    description: `enforce a package resolution`,
    details: `
      This command updates the resolution table so that \`descriptor\` is resolved by \`resolution\`.

      Note that by default this command only affect the current resolution table - meaning that this "manual override" will disappear if you remove the lockfile, or if the package disappear from the table. If you wish to make the enforced resolution persist whatever happens, add the \`-s,--save\` flag which will also edit the \`resolutions\` field from your top-level manifest.

      Note that no attempt is made at validating that \`resolution\` is a valid resolution entry for \`descriptor\`.
    `,
    examples: [[
            `Force all instances of lodash@npm:^1.2.3 to resolve to 1.5.0`,
            `$0 set resolution lodash@npm:^1.2.3 1.5.0`,
        ]],
});
tslib_1.__decorate([
    clipanion_1.Command.String()
], SetResolutionCommand.prototype, "descriptor", void 0);
tslib_1.__decorate([
    clipanion_1.Command.String()
], SetResolutionCommand.prototype, "resolution", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Boolean(`-s,--save`, { description: `Persist the resolution inside the top-level manifest` })
], SetResolutionCommand.prototype, "save", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Path(`set`, `resolution`)
], SetResolutionCommand.prototype, "execute", null);
exports.default = SetResolutionCommand;
