"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setVersion = void 0;
const tslib_1 = require("tslib");
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const core_2 = require("@yarnpkg/core");
const fslib_1 = require("@yarnpkg/fslib");
const clipanion_1 = require("clipanion");
const semver_1 = tslib_1.__importDefault(require("semver"));
// eslint-disable-next-line arca/no-default-export
class SetVersionCommand extends cli_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.onlyIfNeeded = false;
    }
    // TODO: Remove alias in next major
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        if (configuration.get(`yarnPath`) && this.onlyIfNeeded)
            return 0;
        let bundleUrl;
        if (this.version === `latest` || this.version === `berry`)
            bundleUrl = `https://github.com/yarnpkg/berry/raw/master/packages/yarnpkg-cli/bin/yarn.js`;
        else if (this.version === `classic`)
            bundleUrl = `https://nightly.yarnpkg.com/latest.js`;
        else if (core_2.semverUtils.satisfiesWithPrereleases(this.version, `>=2.0.0`))
            bundleUrl = `https://github.com/yarnpkg/berry/raw/%40yarnpkg/cli/${this.version}/packages/yarnpkg-cli/bin/yarn.js`;
        else if (core_2.semverUtils.satisfiesWithPrereleases(this.version, `^0.x || ^1.x`))
            bundleUrl = `https://github.com/yarnpkg/yarn/releases/download/v${this.version}/yarn-${this.version}.js`;
        else if (semver_1.default.validRange(this.version))
            throw new clipanion_1.UsageError(`Support for ranges got removed - please use the exact version you want to install, or 'latest' to get the latest build available`);
        else
            throw new clipanion_1.UsageError(`Invalid version descriptor "${this.version}"`);
        const report = await core_1.StreamReport.start({
            configuration,
            stdout: this.context.stdout,
        }, async (report) => {
            report.reportInfo(core_1.MessageName.UNNAMED, `Downloading ${core_2.formatUtils.pretty(configuration, bundleUrl, `green`)}`);
            const bundleBuffer = await core_2.httpUtils.get(bundleUrl, { configuration });
            await setVersion(configuration, null, bundleBuffer, { report });
        });
        return report.exitCode();
    }
}
SetVersionCommand.usage = clipanion_1.Command.Usage({
    description: `lock the Yarn version used by the project`,
    details: `
      This command will download a specific release of Yarn directly from the Yarn GitHub repository, will store it inside your project, and will change the \`yarnPath\` settings from your project \`.yarnrc.yml\` file to point to the new file.

      A very good use case for this command is to enforce the version of Yarn used by the any single member of your team inside a same project - by doing this you ensure that you have control on Yarn upgrades and downgrades (including on your deployment servers), and get rid of most of the headaches related to someone using a slightly different version and getting a different behavior than you.
    `,
    examples: [[
            `Download the latest release from the Yarn repository`,
            `$0 set version latest`,
        ], [
            `Download the latest classic release from the Yarn repository`,
            `$0 set version classic`,
        ], [
            `Download a specific Yarn 2 build`,
            `$0 set version 2.0.0-rc.30`,
        ], [
            `Switch back to a specific Yarn 1 release`,
            `$0 set version 1.22.1`,
        ]],
});
tslib_1.__decorate([
    clipanion_1.Command.Boolean(`--only-if-needed`, { description: `Only lock the Yarn version if it isn't already locked` })
], SetVersionCommand.prototype, "onlyIfNeeded", void 0);
tslib_1.__decorate([
    clipanion_1.Command.String()
], SetVersionCommand.prototype, "version", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Path(`policies`, `set-version`),
    clipanion_1.Command.Path(`set`, `version`)
], SetVersionCommand.prototype, "execute", null);
exports.default = SetVersionCommand;
async function setVersion(configuration, bundleVersion, bundleBuffer, { report }) {
    const projectCwd = configuration.projectCwd
        ? configuration.projectCwd
        : configuration.startingCwd;
    if (bundleVersion === null) {
        await fslib_1.xfs.mktempPromise(async (tmpDir) => {
            const temporaryPath = fslib_1.ppath.join(tmpDir, `yarn.cjs`);
            await fslib_1.xfs.writeFilePromise(temporaryPath, bundleBuffer);
            const { stdout } = await core_2.execUtils.execvp(process.execPath, [fslib_1.npath.fromPortablePath(temporaryPath), `--version`], {
                cwd: projectCwd,
                env: { ...process.env, YARN_IGNORE_PATH: `1` },
            });
            bundleVersion = stdout.trim();
            if (!semver_1.default.valid(bundleVersion)) {
                throw new Error(`Invalid semver version`);
            }
        });
    }
    const releaseFolder = fslib_1.ppath.resolve(projectCwd, `.yarn/releases`);
    const absolutePath = fslib_1.ppath.resolve(releaseFolder, `yarn-${bundleVersion}.cjs`);
    const displayPath = fslib_1.ppath.relative(configuration.startingCwd, absolutePath);
    const projectPath = fslib_1.ppath.relative(projectCwd, absolutePath);
    const yarnPath = configuration.get(`yarnPath`);
    const updateConfig = yarnPath === null || yarnPath.startsWith(`${releaseFolder}/`);
    report.reportInfo(core_1.MessageName.UNNAMED, `Saving the new release in ${core_2.formatUtils.pretty(configuration, displayPath, `magenta`)}`);
    await fslib_1.xfs.removePromise(fslib_1.ppath.dirname(absolutePath));
    await fslib_1.xfs.mkdirPromise(fslib_1.ppath.dirname(absolutePath), { recursive: true });
    await fslib_1.xfs.writeFilePromise(absolutePath, bundleBuffer);
    await fslib_1.xfs.chmodPromise(absolutePath, 0o755);
    if (updateConfig) {
        await core_1.Configuration.updateConfiguration(projectCwd, {
            yarnPath: projectPath,
        });
    }
}
exports.setVersion = setVersion;
