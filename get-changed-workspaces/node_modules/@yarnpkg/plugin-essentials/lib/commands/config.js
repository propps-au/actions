"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const core_2 = require("@yarnpkg/core");
const clipanion_1 = require("clipanion");
const util_1 = require("util");
// eslint-disable-next-line arca/no-default-export
class ConfigCommand extends cli_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.verbose = false;
        this.why = false;
        this.json = false;
    }
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins, {
            strict: false,
        });
        const report = await core_1.StreamReport.start({
            configuration,
            json: this.json,
            stdout: this.context.stdout,
        }, async (report) => {
            if (configuration.invalid.size > 0 && !this.json) {
                for (const [key, source] of configuration.invalid)
                    report.reportError(core_1.MessageName.INVALID_CONFIGURATION_KEY, `Invalid configuration key "${key}" in ${source}`);
                report.reportSeparator();
            }
            if (this.json) {
                const keys = core_2.miscUtils.sortMap(configuration.settings.keys(), key => key);
                for (const key of keys) {
                    const data = configuration.settings.get(key);
                    const effective = configuration.getSpecial(key, {
                        hideSecrets: true,
                        getNativePaths: true,
                    });
                    const source = configuration.sources.get(key);
                    if (this.verbose) {
                        report.reportJson({ key, effective, source });
                    }
                    else {
                        report.reportJson({ key, effective, source, ...data });
                    }
                }
            }
            else {
                const keys = core_2.miscUtils.sortMap(configuration.settings.keys(), key => key);
                const maxKeyLength = keys.reduce((max, key) => Math.max(max, key.length), 0);
                const inspectConfig = {
                    breakLength: Infinity,
                    colors: configuration.get(`enableColors`),
                    maxArrayLength: 2,
                };
                if (this.why || this.verbose) {
                    const keysAndDescriptions = keys.map(key => {
                        const setting = configuration.settings.get(key);
                        if (!setting)
                            throw new Error(`Assertion failed: This settings ("${key}") should have been registered`);
                        const description = this.why
                            ? configuration.sources.get(key) || `<default>`
                            : setting.description;
                        return [key, description];
                    });
                    const maxDescriptionLength = keysAndDescriptions.reduce((max, [, description]) => {
                        return Math.max(max, description.length);
                    }, 0);
                    for (const [key, description] of keysAndDescriptions) {
                        report.reportInfo(null, `${key.padEnd(maxKeyLength, ` `)}   ${description.padEnd(maxDescriptionLength, ` `)}   ${util_1.inspect(configuration.getSpecial(key, { hideSecrets: true, getNativePaths: true }), inspectConfig)}`);
                    }
                }
                else {
                    for (const key of keys) {
                        report.reportInfo(null, `${key.padEnd(maxKeyLength, ` `)}   ${util_1.inspect(configuration.getSpecial(key, { hideSecrets: true, getNativePaths: true }), inspectConfig)}`);
                    }
                }
            }
        });
        return report.exitCode();
    }
}
ConfigCommand.usage = clipanion_1.Command.Usage({
    description: `display the current configuration`,
    details: `
      This command prints the current active configuration settings.
    `,
    examples: [[
            `Print the active configuration settings`,
            `$0 config`,
        ]],
});
tslib_1.__decorate([
    clipanion_1.Command.Boolean(`-v,--verbose`, { description: `Print the setting description on top of the regular key/value information` })
], ConfigCommand.prototype, "verbose", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Boolean(`--why`, { description: `Print the reason why a setting is set a particular way` })
], ConfigCommand.prototype, "why", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Boolean(`--json`, { description: `Format the output as an NDJSON stream` })
], ConfigCommand.prototype, "json", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Path(`config`)
], ConfigCommand.prototype, "execute", null);
exports.default = ConfigCommand;
