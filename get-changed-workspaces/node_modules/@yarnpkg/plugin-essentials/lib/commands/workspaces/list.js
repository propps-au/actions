"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const clipanion_1 = require("clipanion");
// eslint-disable-next-line arca/no-default-export
class WorkspacesListCommand extends cli_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.verbose = false;
        this.json = false;
    }
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        const { project } = await core_1.Project.find(configuration, this.context.cwd);
        const report = await core_1.StreamReport.start({
            configuration,
            json: this.json,
            stdout: this.context.stdout,
        }, async (report) => {
            for (const workspace of project.workspaces) {
                const { manifest } = workspace;
                let extra;
                if (this.verbose) {
                    const workspaceDependencies = new Set();
                    const mismatchedWorkspaceDependencies = new Set();
                    for (const dependencyType of core_1.Manifest.hardDependencies) {
                        for (const [identHash, descriptor] of manifest.getForScope(dependencyType)) {
                            const matchingWorkspace = project.tryWorkspaceByDescriptor(descriptor);
                            if (matchingWorkspace === null) {
                                if (project.workspacesByIdent.has(identHash)) {
                                    mismatchedWorkspaceDependencies.add(descriptor);
                                }
                            }
                            else {
                                workspaceDependencies.add(matchingWorkspace);
                            }
                        }
                    }
                    extra = {
                        workspaceDependencies: Array.from(workspaceDependencies).map(workspace => {
                            return workspace.relativeCwd;
                        }),
                        mismatchedWorkspaceDependencies: Array.from(mismatchedWorkspaceDependencies).map(descriptor => {
                            return core_1.structUtils.stringifyDescriptor(descriptor);
                        }),
                    };
                }
                report.reportInfo(null, `${workspace.relativeCwd}`);
                report.reportJson({
                    location: workspace.relativeCwd,
                    name: manifest.name
                        ? core_1.structUtils.stringifyIdent(manifest.name)
                        : null,
                    ...extra,
                });
            }
        });
        return report.exitCode();
    }
}
WorkspacesListCommand.usage = clipanion_1.Command.Usage({
    category: `Workspace-related commands`,
    description: `list all available workspaces`,
    details: `
      This command will print the list of all workspaces in the project. If both the \`-v,--verbose\` and \`--json\` options are set, Yarn will also return the cross-dependencies between each workspaces (useful when you wish to automatically generate Buck / Bazel rules).
    `,
});
tslib_1.__decorate([
    clipanion_1.Command.Boolean(`-v,--verbose`, { description: `Also return the cross-dependencies between workspaces` })
], WorkspacesListCommand.prototype, "verbose", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Boolean(`--json`, { description: `Format the output as an NDJSON stream` })
], WorkspacesListCommand.prototype, "json", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Path(`workspaces`, `list`)
], WorkspacesListCommand.prototype, "execute", null);
exports.default = WorkspacesListCommand;
