import { Resolver, ResolveOptions, MinimalResolveOptions } from '@yarnpkg/core';
import { Descriptor, Locator } from '@yarnpkg/core';
import { LinkType } from '@yarnpkg/core';
export declare class RawLinkResolver implements Resolver {
    supportsDescriptor(descriptor: Descriptor, opts: MinimalResolveOptions): boolean;
    supportsLocator(locator: Locator, opts: MinimalResolveOptions): boolean;
    shouldPersistResolution(locator: Locator, opts: MinimalResolveOptions): boolean;
    bindDescriptor(descriptor: Descriptor, fromLocator: Locator, opts: MinimalResolveOptions): Descriptor;
    getResolutionDependencies(descriptor: Descriptor, opts: MinimalResolveOptions): never[];
    getCandidates(descriptor: Descriptor, dependencies: unknown, opts: ResolveOptions): Promise<Locator[]>;
    getSatisfying(descriptor: Descriptor, references: Array<string>, opts: ResolveOptions): Promise<null>;
    resolve(locator: Locator, opts: ResolveOptions): Promise<{
        version: string;
        languageName: any;
        linkType: LinkType;
        dependencies: Map<any, any>;
        peerDependencies: Map<any, any>;
        dependenciesMeta: Map<any, any>;
        peerDependenciesMeta: Map<any, any>;
        bin: Map<any, any>;
        locatorHash: import("@yarnpkg/core").LocatorHash;
        reference: string;
        identHash: import("@yarnpkg/core").IdentHash;
        scope: string | null;
        name: string;
    }>;
}
