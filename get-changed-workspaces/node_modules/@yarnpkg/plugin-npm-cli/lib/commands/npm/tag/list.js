"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDistTags = void 0;
const tslib_1 = require("tslib");
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const fslib_1 = require("@yarnpkg/fslib");
const plugin_npm_1 = require("@yarnpkg/plugin-npm");
const clipanion_1 = require("clipanion");
// eslint-disable-next-line arca/no-default-export
class NpmTagListCommand extends cli_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.json = false;
    }
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        const { project, workspace } = await core_1.Project.find(configuration, this.context.cwd);
        let ident;
        if (typeof this.package !== `undefined`) {
            ident = core_1.structUtils.parseIdent(this.package);
        }
        else {
            if (!workspace)
                throw new cli_1.WorkspaceRequiredError(project.cwd, this.context.cwd);
            if (!workspace.manifest.name)
                throw new clipanion_1.UsageError(`Missing 'name' field in ${fslib_1.ppath.join(workspace.cwd, fslib_1.Filename.manifest)}`);
            ident = workspace.manifest.name;
        }
        const distTags = await getDistTags(ident, configuration);
        const distTagEntries = core_1.miscUtils.sortMap(Object.entries(distTags), ([tag]) => tag);
        const tree = {
            children: distTagEntries.map(([tag, version]) => ({
                value: core_1.formatUtils.tuple(core_1.formatUtils.Type.RESOLUTION, {
                    descriptor: core_1.structUtils.makeDescriptor(ident, tag),
                    locator: core_1.structUtils.makeLocator(ident, version),
                }),
            })),
        };
        return core_1.treeUtils.emitTree(tree, {
            configuration,
            json: this.json,
            stdout: this.context.stdout,
        });
    }
}
NpmTagListCommand.usage = clipanion_1.Command.Usage({
    category: `Npm-related commands`,
    description: `list all dist-tags of a package`,
    details: `
      This command will list all tags of a package from the npm registry.

      If the package is not specified, Yarn will default to the current workspace.
    `,
    examples: [[
            `List all tags of package \`my-pkg\``,
            `yarn npm tag list my-pkg`,
        ]],
});
tslib_1.__decorate([
    clipanion_1.Command.String({ required: false })
], NpmTagListCommand.prototype, "package", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Boolean(`--json`, { description: `Format the output as an NDJSON stream` })
], NpmTagListCommand.prototype, "json", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Path(`npm`, `tag`, `list`)
], NpmTagListCommand.prototype, "execute", null);
exports.default = NpmTagListCommand;
async function getDistTags(ident, configuration) {
    const url = `/-/package${plugin_npm_1.npmHttpUtils.getIdentUrl(ident)}/dist-tags`;
    return plugin_npm_1.npmHttpUtils.get(url, {
        configuration,
        ident,
        jsonResponse: true,
    }).catch(err => {
        if (err.name !== `HTTPError`) {
            throw err;
        }
        else if (err.response.statusCode === 404) {
            throw new core_1.ReportError(core_1.MessageName.EXCEPTION, `Package not found`);
        }
        else {
            throw new core_1.ReportError(core_1.MessageName.EXCEPTION, err.toString());
        }
    });
}
exports.getDistTags = getDistTags;
