"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@yarnpkg/core");
const extensions_1 = require("./extensions");
const fsevents_patch_1 = require("./patches/fsevents.patch");
const resolve_patch_1 = require("./patches/resolve.patch");
const typescript_patch_1 = require("./patches/typescript.patch");
const PATCHES = new Map([
    [core_1.structUtils.makeIdent(null, `fsevents`).identHash, fsevents_patch_1.getPatch],
    [core_1.structUtils.makeIdent(null, `resolve`).identHash, resolve_patch_1.getPatch],
    [core_1.structUtils.makeIdent(null, `typescript`).identHash, typescript_patch_1.getPatch],
]);
const plugin = {
    hooks: {
        registerPackageExtensions: async (configuration, registerPackageExtension) => {
            for (const [descriptorStr, extensionData] of extensions_1.packageExtensions) {
                registerPackageExtension(core_1.structUtils.parseDescriptor(descriptorStr, true), extensionData);
            }
        },
        getBuiltinPatch: async (project, name) => {
            var _a;
            const TAG = `compat/`;
            if (!name.startsWith(TAG))
                return undefined;
            const ident = core_1.structUtils.parseIdent(name.slice(TAG.length));
            const patch = (_a = PATCHES.get(ident.identHash)) === null || _a === void 0 ? void 0 : _a();
            return typeof patch !== `undefined` ? patch : null;
        },
        reduceDependency: async (dependency, project, locator, initialDescriptor) => {
            const patch = PATCHES.get(dependency.identHash);
            if (typeof patch === `undefined`)
                return dependency;
            return core_1.structUtils.makeDescriptor(dependency, core_1.structUtils.makeRange({
                protocol: `patch:`,
                source: core_1.structUtils.stringifyDescriptor(dependency),
                selector: `builtin<compat/${core_1.structUtils.stringifyIdent(dependency)}>`,
                params: null,
            }));
        },
    },
};
// eslint-disable-next-line arca/no-default-export
exports.default = plugin;
