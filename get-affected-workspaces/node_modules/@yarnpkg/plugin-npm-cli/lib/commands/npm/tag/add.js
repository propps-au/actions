"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const plugin_npm_1 = require("@yarnpkg/plugin-npm");
const clipanion_1 = require("clipanion");
const semver_1 = tslib_1.__importDefault(require("semver"));
const list_1 = require("./list");
// eslint-disable-next-line arca/no-default-export
class NpmTagAddCommand extends cli_1.BaseCommand {
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        const { project, workspace } = await core_1.Project.find(configuration, this.context.cwd);
        if (!workspace)
            throw new cli_1.WorkspaceRequiredError(project.cwd, this.context.cwd);
        const descriptor = core_1.structUtils.parseDescriptor(this.package, true);
        const version = descriptor.range;
        if (!semver_1.default.valid(version))
            throw new clipanion_1.UsageError(`The range ${core_1.formatUtils.pretty(configuration, descriptor.range, core_1.formatUtils.Type.RANGE)} must be a valid semver version`);
        const registry = plugin_npm_1.npmConfigUtils.getPublishRegistry(workspace.manifest, { configuration });
        const prettyIdent = core_1.formatUtils.pretty(configuration, descriptor, core_1.formatUtils.Type.IDENT);
        const prettyVersion = core_1.formatUtils.pretty(configuration, version, core_1.formatUtils.Type.RANGE);
        const prettyTag = core_1.formatUtils.pretty(configuration, this.tag, core_1.formatUtils.Type.CODE);
        const report = await core_1.StreamReport.start({
            configuration,
            stdout: this.context.stdout,
        }, async (report) => {
            const distTags = await list_1.getDistTags(descriptor, configuration);
            if (Object.prototype.hasOwnProperty.call(distTags, this.tag) && distTags[this.tag] === version)
                report.reportWarning(core_1.MessageName.UNNAMED, `Tag ${prettyTag} is already set to version ${prettyVersion}`);
            try {
                const url = `/-/package${plugin_npm_1.npmHttpUtils.getIdentUrl(descriptor)}/dist-tags/${encodeURIComponent(this.tag)}`;
                await plugin_npm_1.npmHttpUtils.put(url, version, {
                    configuration,
                    registry,
                    ident: descriptor,
                    jsonRequest: true,
                    jsonResponse: true,
                });
            }
            catch (error) {
                if (error.name !== `HTTPError`) {
                    throw error;
                }
                else {
                    const message = error.response.body && error.response.body.error
                        ? error.response.body.error
                        : `The remote server answered with HTTP ${error.response.statusCode} ${error.response.statusMessage}`;
                    report.reportError(core_1.MessageName.NETWORK_ERROR, message);
                }
            }
            if (!report.hasErrors()) {
                report.reportInfo(core_1.MessageName.UNNAMED, `Tag ${prettyTag} added to version ${prettyVersion} of package ${prettyIdent}`);
            }
        });
        return report.exitCode();
    }
}
NpmTagAddCommand.usage = clipanion_1.Command.Usage({
    category: `Npm-related commands`,
    description: `add a tag for a specific version of a package`,
    details: `
      This command will add a tag to the npm registry for a specific version of a package. If the tag already exists, it will be overwritten.
    `,
    examples: [[
            `Add a \`beta\` tag for version \`2.3.4-beta.4\` of package \`my-pkg\``,
            `yarn npm tag add my-pkg@2.3.4-beta.4 beta`,
        ]],
});
tslib_1.__decorate([
    clipanion_1.Command.String()
], NpmTagAddCommand.prototype, "package", void 0);
tslib_1.__decorate([
    clipanion_1.Command.String()
], NpmTagAddCommand.prototype, "tag", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Path(`npm`, `tag`, `add`)
], NpmTagAddCommand.prototype, "execute", null);
exports.default = NpmTagAddCommand;
