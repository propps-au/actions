"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const plugin_npm_1 = require("@yarnpkg/plugin-npm");
const clipanion_1 = require("clipanion");
const yup = tslib_1.__importStar(require("yup"));
const list_1 = require("./list");
// eslint-disable-next-line arca/no-default-export
class NpmTagRemoveCommand extends cli_1.BaseCommand {
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        const { project, workspace } = await core_1.Project.find(configuration, this.context.cwd);
        if (!workspace)
            throw new cli_1.WorkspaceRequiredError(project.cwd, this.context.cwd);
        const ident = core_1.structUtils.parseIdent(this.package);
        const registry = plugin_npm_1.npmConfigUtils.getPublishRegistry(workspace.manifest, { configuration });
        const prettyTag = core_1.formatUtils.pretty(configuration, this.tag, core_1.formatUtils.Type.CODE);
        const prettyIdent = core_1.formatUtils.pretty(configuration, ident, core_1.formatUtils.Type.IDENT);
        const distTags = await list_1.getDistTags(ident, configuration);
        if (!Object.prototype.hasOwnProperty.call(distTags, this.tag))
            throw new clipanion_1.UsageError(`${prettyTag} is not a tag of package ${prettyIdent}`);
        const report = await core_1.StreamReport.start({
            configuration,
            stdout: this.context.stdout,
        }, async (report) => {
            try {
                const url = `/-/package${plugin_npm_1.npmHttpUtils.getIdentUrl(ident)}/dist-tags/${encodeURIComponent(this.tag)}`;
                await plugin_npm_1.npmHttpUtils.del(url, {
                    configuration,
                    registry,
                    ident,
                    jsonResponse: true,
                });
            }
            catch (error) {
                if (error.name !== `HTTPError`) {
                    throw error;
                }
                else {
                    const message = error.response.body && error.response.body.error
                        ? error.response.body.error
                        : `The remote server answered with HTTP ${error.response.statusCode} ${error.response.statusMessage}`;
                    report.reportError(core_1.MessageName.NETWORK_ERROR, message);
                }
            }
            if (!report.hasErrors()) {
                report.reportInfo(core_1.MessageName.UNNAMED, `Tag ${prettyTag} removed from package ${prettyIdent}`);
            }
        });
        return report.exitCode();
    }
}
NpmTagRemoveCommand.schema = yup.object().shape({
    // Better show a more detailed error, rather than the npm registry's "Bad request"
    tag: yup.string().notOneOf([`latest`]),
});
NpmTagRemoveCommand.usage = clipanion_1.Command.Usage({
    category: `Npm-related commands`,
    description: `remove a tag from a package`,
    details: `
      This command will remove a tag from a package from the npm registry.
    `,
    examples: [[
            `Remove the \`beta\` tag from package \`my-pkg\``,
            `yarn npm tag remove my-pkg beta`,
        ]],
});
tslib_1.__decorate([
    clipanion_1.Command.String()
], NpmTagRemoveCommand.prototype, "package", void 0);
tslib_1.__decorate([
    clipanion_1.Command.String()
], NpmTagRemoveCommand.prototype, "tag", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Path(`npm`, `tag`, `remove`)
], NpmTagRemoveCommand.prototype, "execute", null);
exports.default = NpmTagRemoveCommand;
