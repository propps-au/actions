"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GithubFetcher = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@yarnpkg/core");
const fslib_1 = require("@yarnpkg/fslib");
const plugin_git_1 = require("@yarnpkg/plugin-git");
const githubUtils = tslib_1.__importStar(require("./githubUtils"));
class GithubFetcher {
    supports(locator, opts) {
        if (!githubUtils.isGithubUrl(locator.reference))
            return false;
        return true;
    }
    getLocalPath(locator, opts) {
        return null;
    }
    async fetch(locator, opts) {
        const expectedChecksum = opts.checksums.get(locator.locatorHash) || null;
        const [packageFs, releaseFs, checksum] = await opts.cache.fetchPackageFromCache(locator, expectedChecksum, {
            onHit: () => opts.report.reportCacheHit(locator),
            onMiss: () => opts.report.reportCacheMiss(locator, `${core_1.structUtils.prettyLocator(opts.project.configuration, locator)} can't be found in the cache and will be fetched from GitHub`),
            loader: () => this.fetchFromNetwork(locator, opts),
            skipIntegrityCheck: opts.skipIntegrityCheck,
        });
        return {
            packageFs,
            releaseFs,
            prefixPath: core_1.structUtils.getIdentVendorPath(locator),
            checksum,
        };
    }
    async fetchFromNetwork(locator, opts) {
        const sourceBuffer = await core_1.httpUtils.get(this.getLocatorUrl(locator, opts), {
            configuration: opts.project.configuration,
        });
        return await fslib_1.xfs.mktempPromise(async (extractPath) => {
            const extractTarget = new fslib_1.CwdFS(extractPath);
            await core_1.tgzUtils.extractArchiveTo(sourceBuffer, extractTarget, {
                stripComponents: 1,
            });
            const repoUrlParts = plugin_git_1.gitUtils.splitRepoUrl(locator.reference);
            const packagePath = fslib_1.ppath.join(extractPath, `package.tgz`);
            await core_1.scriptUtils.prepareExternalProject(extractPath, packagePath, {
                configuration: opts.project.configuration,
                report: opts.report,
                workspace: repoUrlParts.extra.workspace,
            });
            const packedBuffer = await fslib_1.xfs.readFilePromise(packagePath);
            return await core_1.tgzUtils.convertToZip(packedBuffer, {
                compressionLevel: opts.project.configuration.get(`compressionLevel`),
                prefixPath: core_1.structUtils.getIdentVendorPath(locator),
                stripComponents: 1,
            });
        });
    }
    getLocatorUrl(locator, opts) {
        const { auth, username, reponame, treeish } = githubUtils.parseGithubUrl(locator.reference);
        return `https://${auth ? `${auth}@` : ``}github.com/${username}/${reponame}/archive/${treeish}.tar.gz`;
    }
}
exports.GithubFetcher = GithubFetcher;
