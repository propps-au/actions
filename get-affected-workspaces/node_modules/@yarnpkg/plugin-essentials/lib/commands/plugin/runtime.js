"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const clipanion_1 = require("clipanion");
// eslint-disable-next-line arca/no-default-export
class PluginListCommand extends cli_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.json = false;
    }
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        const report = await core_1.StreamReport.start({
            configuration,
            json: this.json,
            stdout: this.context.stdout,
        }, async (report) => {
            for (const name of configuration.plugins.keys()) {
                const builtin = this.context.plugins.plugins.has(name);
                let label = name;
                if (builtin)
                    label += ` [builtin]`;
                report.reportJson({ name, builtin });
                report.reportInfo(null, `${label}`);
            }
        });
        return report.exitCode();
    }
}
PluginListCommand.usage = clipanion_1.Command.Usage({
    category: `Plugin-related commands`,
    description: `list the active plugins`,
    details: `
      This command prints the currently active plugins. Will be displayed both builtin plugins and external plugins.
    `,
    examples: [[
            `List the currently active plugins`,
            `$0 plugin runtime`,
        ]],
});
tslib_1.__decorate([
    clipanion_1.Command.Boolean(`--json`, { description: `Format the output as an NDJSON stream` })
], PluginListCommand.prototype, "json", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Path(`plugin`, `runtime`)
], PluginListCommand.prototype, "execute", null);
exports.default = PluginListCommand;
