"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.savePlugin = void 0;
const tslib_1 = require("tslib");
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const core_2 = require("@yarnpkg/core");
const fslib_1 = require("@yarnpkg/fslib");
const clipanion_1 = require("clipanion");
const url_1 = require("url");
const vm_1 = require("vm");
const list_1 = require("./list");
// eslint-disable-next-line arca/no-default-export
class PluginDlCommand extends cli_1.BaseCommand {
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        const report = await core_1.StreamReport.start({
            configuration,
            stdout: this.context.stdout,
        }, async (report) => {
            const { project } = await core_1.Project.find(configuration, this.context.cwd);
            let pluginSpec;
            let pluginBuffer;
            if (this.name.match(/^\.{0,2}[\\/]/) || fslib_1.npath.isAbsolute(this.name)) {
                const candidatePath = fslib_1.ppath.resolve(this.context.cwd, fslib_1.npath.toPortablePath(this.name));
                report.reportInfo(core_1.MessageName.UNNAMED, `Reading ${core_2.formatUtils.pretty(configuration, candidatePath, core_2.formatUtils.Type.PATH)}`);
                pluginSpec = fslib_1.ppath.relative(project.cwd, candidatePath);
                pluginBuffer = await fslib_1.xfs.readFilePromise(candidatePath);
            }
            else {
                let pluginUrl;
                if (this.name.match(/^https?:/)) {
                    try {
                        new url_1.URL(this.name);
                    }
                    catch (_a) {
                        throw new core_1.ReportError(core_1.MessageName.INVALID_PLUGIN_REFERENCE, `Plugin specifier "${this.name}" is neither a plugin name nor a valid url`);
                    }
                    pluginSpec = this.name;
                    pluginUrl = this.name;
                }
                else {
                    const ident = core_2.structUtils.parseIdent(this.name.replace(/^((@yarnpkg\/)?plugin-)?/, `@yarnpkg/plugin-`));
                    const identStr = core_2.structUtils.stringifyIdent(ident);
                    const data = await list_1.getAvailablePlugins(configuration);
                    if (!Object.prototype.hasOwnProperty.call(data, identStr))
                        throw new core_1.ReportError(core_1.MessageName.PLUGIN_NAME_NOT_FOUND, `Couldn't find a plugin named "${identStr}" on the remote registry. Note that only the plugins referenced on our website (https://github.com/yarnpkg/berry/blob/master/plugins.yml) can be referenced by their name; any other plugin will have to be referenced through its public url (for example https://github.com/yarnpkg/berry/raw/master/packages/plugin-typescript/bin/%40yarnpkg/plugin-typescript.js).`);
                    pluginSpec = identStr;
                    pluginUrl = data[identStr].url;
                }
                report.reportInfo(core_1.MessageName.UNNAMED, `Downloading ${core_2.formatUtils.pretty(configuration, pluginUrl, `green`)}`);
                pluginBuffer = await core_2.httpUtils.get(pluginUrl, { configuration });
            }
            await savePlugin(pluginSpec, pluginBuffer, { project, report });
        });
        return report.exitCode();
    }
}
PluginDlCommand.usage = clipanion_1.Command.Usage({
    category: `Plugin-related commands`,
    description: `download a plugin`,
    details: `
      This command downloads the specified plugin from its remote location and updates the configuration to reference it in further CLI invocations.

      Three types of plugin references are accepted:

      - If the plugin is stored within the Yarn repository, it can be referenced by name.
      - Third-party plugins can be referenced directly through their public urls.
      - Local plugins can be referenced by their path on the disk.

      Plugins cannot be downloaded from the npm registry, and aren't allowed to have dependencies (they need to be bundled into a single file, possibly thanks to the \`@yarnpkg/builder\` package).
    `,
    examples: [[
            `Download and activate the "@yarnpkg/plugin-exec" plugin`,
            `$0 plugin import @yarnpkg/plugin-exec`,
        ], [
            `Download and activate the "@yarnpkg/plugin-exec" plugin (shorthand)`,
            `$0 plugin import exec`,
        ], [
            `Download and activate a community plugin`,
            `$0 plugin import https://example.org/path/to/plugin.js`,
        ], [
            `Activate a local plugin`,
            `$0 plugin import ./path/to/plugin.js`,
        ]],
});
tslib_1.__decorate([
    clipanion_1.Command.String()
], PluginDlCommand.prototype, "name", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Path(`plugin`, `import`)
], PluginDlCommand.prototype, "execute", null);
exports.default = PluginDlCommand;
async function savePlugin(pluginSpec, pluginBuffer, { project, report }) {
    const { configuration } = project;
    const vmExports = {};
    const vmModule = { exports: vmExports };
    vm_1.runInNewContext(pluginBuffer.toString(), {
        module: vmModule,
        exports: vmExports,
    });
    const pluginName = vmModule.exports.name;
    const relativePath = `.yarn/plugins/${pluginName}.cjs`;
    const absolutePath = fslib_1.ppath.resolve(project.cwd, relativePath);
    report.reportInfo(core_1.MessageName.UNNAMED, `Saving the new plugin in ${core_2.formatUtils.pretty(configuration, relativePath, `magenta`)}`);
    await fslib_1.xfs.mkdirPromise(fslib_1.ppath.dirname(absolutePath), { recursive: true });
    await fslib_1.xfs.writeFilePromise(absolutePath, pluginBuffer);
    const pluginMeta = {
        path: relativePath,
        spec: pluginSpec,
    };
    await core_1.Configuration.updateConfiguration(project.cwd, (current) => {
        const plugins = [];
        let hasBeenReplaced = false;
        for (const entry of current.plugins || []) {
            const userProvidedPath = typeof entry !== `string`
                ? entry.path
                : entry;
            const pluginPath = fslib_1.ppath.resolve(project.cwd, fslib_1.npath.toPortablePath(userProvidedPath));
            const { name } = core_1.miscUtils.dynamicRequire(fslib_1.npath.fromPortablePath(pluginPath));
            if (name !== pluginName) {
                plugins.push(entry);
            }
            else {
                plugins.push(pluginMeta);
                hasBeenReplaced = true;
            }
        }
        if (!hasBeenReplaced)
            plugins.push(pluginMeta);
        return { ...current, plugins };
    });
}
exports.savePlugin = savePlugin;
