"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const core_2 = require("@yarnpkg/core");
const clipanion_1 = require("clipanion");
const util_1 = require("util");
// eslint-disable-next-line arca/no-default-export
class RunCommand extends cli_1.BaseCommand {
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        const { project, workspace } = await core_1.Project.find(configuration, this.context.cwd);
        if (!workspace)
            throw new cli_1.WorkspaceRequiredError(project.cwd, this.context.cwd);
        const report = await core_1.StreamReport.start({
            configuration,
            stdout: this.context.stdout,
        }, async (report) => {
            const scripts = workspace.manifest.scripts;
            const keys = core_2.miscUtils.sortMap(scripts.keys(), key => key);
            const inspectConfig = {
                breakLength: Infinity,
                colors: configuration.get(`enableColors`),
                maxArrayLength: 2,
            };
            const maxKeyLength = keys.reduce((max, key) => {
                return Math.max(max, key.length);
            }, 0);
            for (const [key, value] of scripts.entries()) {
                report.reportInfo(null, `${key.padEnd(maxKeyLength, ` `)}   ${util_1.inspect(value, inspectConfig)}`);
            }
        });
        return report.exitCode();
    }
}
tslib_1.__decorate([
    clipanion_1.Command.Path(`run`)
], RunCommand.prototype, "execute", null);
exports.default = RunCommand;
