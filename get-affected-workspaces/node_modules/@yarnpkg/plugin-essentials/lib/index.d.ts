import { Descriptor, Plugin, Package, formatUtils } from '@yarnpkg/core';
import { Workspace } from '@yarnpkg/core';
import * as dedupeUtils from './suggestUtils';
import * as suggestUtils from './suggestUtils';
export { dedupeUtils, suggestUtils, };
export interface Hooks {
    afterWorkspaceDependencyAddition?: (workspace: Workspace, target: suggestUtils.Target, descriptor: Descriptor, strategies: Array<suggestUtils.Strategy>) => Promise<void>;
    afterWorkspaceDependencyReplacement?: (workspace: Workspace, target: suggestUtils.Target, fromDescriptor: Descriptor, toDescriptor: Descriptor) => Promise<void>;
    afterWorkspaceDependencyRemoval?: (workspace: Workspace, target: suggestUtils.Target, descriptor: Descriptor) => Promise<void>;
    fetchPackageInfo?: (pkg: Package, extra: Set<string>, registerData: (namespace: string, data: Array<formatUtils.Tuple> | {
        [key: string]: formatUtils.Tuple | undefined;
    }) => void) => Promise<void>;
}
declare module '@yarnpkg/core' {
    interface ConfigurationValueMap {
        enableImmutableInstalls: boolean;
        defaultSemverRangePrefix: `^` | `~` | ``;
    }
}
declare const plugin: Plugin;
export default plugin;
