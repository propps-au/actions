"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WelcomeCommand = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@yarnpkg/core");
const clipanion_1 = require("clipanion");
const BaseCommand_1 = require("./BaseCommand");
const getMessage = (configuration) => `
${core_1.formatUtils.pretty(configuration, `Welcome on Yarn 2!`, `bold`)} ðŸŽ‰ Thanks for helping us shape our vision of how projects
should be managed going forward.

Being still in RC, Yarn 2 isn't completely stable yet. Some features might be
missing, and some behaviors may have received major overhaul. In case of doubt,
use the following URLs to get some insight:

  - The changelog:
    ${core_1.formatUtils.pretty(configuration, `https://github.com/yarnpkg/berry/tree/CHANGELOG.md`, `cyan`)}

  - Our issue tracker:
    ${core_1.formatUtils.pretty(configuration, `https://github.com/yarnpkg/berry`, `cyan`)}

  - Our Discord server:
    ${core_1.formatUtils.pretty(configuration, `https://discord.gg/yarnpkg`, `cyan`)}

We're hoping you will enjoy the experience. For now, a good start is to run
the two following commands:

  ${core_1.formatUtils.pretty(configuration, `find . -name node_modules -prune -exec rm -r {} \\;`, `magenta`)}
  ${core_1.formatUtils.pretty(configuration, `yarn install`, `magenta`)}

One last trick! If you need at some point to upgrade Yarn to a nightly build,
the following command will install the CLI straight from master:

  ${core_1.formatUtils.pretty(configuration, `yarn set version from sources`, `magenta`)}

See you later ðŸ‘‹
`;
class WelcomeCommand extends BaseCommand_1.BaseCommand {
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        this.context.stdout.write(`${getMessage(configuration).trim()}\n`);
    }
}
tslib_1.__decorate([
    clipanion_1.Command.Path(`--welcome`)
], WelcomeCommand.prototype, "execute", null);
exports.WelcomeCommand = WelcomeCommand;
